kotlin version: 2.0.0
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: D:/@AndroidProjects/Meraki/app/src/main/java/com/iamashad/meraki/screens/home/HomeScreen.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:50)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:29)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:16)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:241)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:140)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:155)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:50)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:104)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:48)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:453)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:62)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally$lambda$9$compile(IncrementalCompilerRunner.kt:249)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally(IncrementalCompilerRunner.kt:267)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:120)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:676)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1661)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN LOCAL_FUNCTION_FOR_LAMBDA name:QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51 visibility:private modality:FINAL <> ($isTopCard:kotlin.Boolean, $index:@[ParameterName(name = "index")] kotlin.Int, $this$graphicsLayer:androidx.compose.ui.graphics.GraphicsLayerScope) returnType:kotlin.Unit?
  VALUE_PARAMETER BOUND_VALUE_PARAMETER name:$isTopCard index:0 type:kotlin.Boolean
  VALUE_PARAMETER BOUND_VALUE_PARAMETER name:$index index:1 type:@[ParameterName(name = "index")] kotlin.Int
  VALUE_PARAMETER name:$this$graphicsLayer index:2 type:androidx.compose.ui.graphics.GraphicsLayerScope
  BLOCK_BODY
    CALL 'public abstract fun <set-scaleX> (value: kotlin.Float): kotlin.Unit declared in androidx.compose.ui.graphics.GraphicsLayerScope' type=kotlin.Unit origin=EQ
      $this: GET_VAR '$this$graphicsLayer: androidx.compose.ui.graphics.GraphicsLayerScope declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=androidx.compose.ui.graphics.GraphicsLayerScope origin=null
      value: WHEN type=kotlin.Float origin=IF
        BRANCH
          if: GET_VAR '$isTopCard: kotlin.Boolean declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=kotlin.Boolean origin=null
          then: CONST Float type=kotlin.Float value=1.0
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CALL 'public final fun minus (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Float' type=kotlin.Float origin=MINUS
            $this: CONST Float type=kotlin.Float value=0.95
            other: CALL 'public final fun times (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Int' type=kotlin.Float origin=MUL
              $this: GET_VAR '$index: @[ParameterName(name = "index")] kotlin.Int declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=@[ParameterName(name = "index")] kotlin.Int origin=null
              other: CONST Float type=kotlin.Float value=0.01
    CALL 'public abstract fun <set-scaleY> (value: kotlin.Float): kotlin.Unit declared in androidx.compose.ui.graphics.GraphicsLayerScope' type=kotlin.Unit origin=EQ
      $this: GET_VAR '$this$graphicsLayer: androidx.compose.ui.graphics.GraphicsLayerScope declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=androidx.compose.ui.graphics.GraphicsLayerScope origin=null
      value: WHEN type=kotlin.Float origin=IF
        BRANCH
          if: GET_VAR '$isTopCard: kotlin.Boolean declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=kotlin.Boolean origin=null
          then: CONST Float type=kotlin.Float value=1.0
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CALL 'public final fun minus (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Float' type=kotlin.Float origin=MINUS
            $this: CONST Float type=kotlin.Float value=0.95
            other: CALL 'public final fun times (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Int' type=kotlin.Float origin=MUL
              $this: GET_VAR '$index: @[ParameterName(name = "index")] kotlin.Int declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=@[ParameterName(name = "index")] kotlin.Int origin=null
              other: CONST Float type=kotlin.Float value=0.01
    SET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:translationZ type:kotlin.Int visibility:public [final,static]' type=kotlin.Unit origin=EQ
      value: WHEN type=kotlin.Int origin=IF
        BRANCH
          if: GET_VAR '$isTopCard: kotlin.Boolean declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=kotlin.Boolean origin=null
          then: CONST Int type=kotlin.Int value=8
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CALL 'public open fun toInt (): kotlin.Int declared in kotlin.Float' type=kotlin.Int origin=null
            $this: CALL 'public final fun plus (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Float' type=kotlin.Float origin=PLUS
              $this: CONST Float type=kotlin.Float value=4.0
              other: CALL 'public final fun times (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Int' type=kotlin.Float origin=MUL
                $this: GET_VAR '$index: @[ParameterName(name = "index")] kotlin.Int declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=@[ParameterName(name = "index")] kotlin.Int origin=null
                other: CONST Float type=kotlin.Float value=2.0

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:50)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:42)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:385)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:402)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:169)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:41)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt.makeIrFilePhase$lambda$5(PhaseBuilders.kt:114)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 44 more
Caused by: java.lang.AssertionError: access of const val: SET_FIELD 'FIELD IR_EXTERNAL_JAVA_DECLARATION_STUB name:translationZ type:kotlin.Int visibility:public [final,static]' type=kotlin.Unit origin=EQ
  value: WHEN type=kotlin.Int origin=IF
    BRANCH
      if: GET_VAR '$isTopCard: kotlin.Boolean declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=kotlin.Boolean origin=null
      then: CONST Int type=kotlin.Int value=8
    BRANCH
      if: CONST Boolean type=kotlin.Boolean value=true
      then: CALL 'public open fun toInt (): kotlin.Int declared in kotlin.Float' type=kotlin.Int origin=null
        $this: CALL 'public final fun plus (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Float' type=kotlin.Float origin=PLUS
          $this: CONST Float type=kotlin.Float value=4.0
          other: CALL 'public final fun times (other: kotlin.Float): kotlin.Float [operator] declared in kotlin.Int' type=kotlin.Float origin=MUL
            $this: GET_VAR '$index: @[ParameterName(name = "index")] kotlin.Int declared in com.iamashad.meraki.screens.home.HomeScreenKt.QuoteCardStack$lambda$56$lambda$55$lambda$52$lambda$51' type=@[ParameterName(name = "index")] kotlin.Int origin=null
            other: CONST Float type=kotlin.Float value=2.0

	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitFieldAccess(ExpressionCodegen.kt:855)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitFieldAccess(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitor$DefaultImpls.visitSetField(IrElementVisitor.kt:206)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitSetField(ExpressionCodegen.kt:902)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitSetField(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.expressions.IrSetField.accept(IrSetField.kt:21)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:573)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:578)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:239)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:121)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:46)
	... 54 more


